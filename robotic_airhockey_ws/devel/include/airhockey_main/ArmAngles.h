// Generated by gencpp from file airhockey_main/ArmAngles.msg
// DO NOT EDIT!


#ifndef AIRHOCKEY_MAIN_MESSAGE_ARMANGLES_H
#define AIRHOCKEY_MAIN_MESSAGE_ARMANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace airhockey_main
{
template <class ContainerAllocator>
struct ArmAngles_
{
  typedef ArmAngles_<ContainerAllocator> Type;

  ArmAngles_()
    : arm0_joint0(0.0)
    , arm0_joint1(0.0)
    , arm1_joint0(0.0)
    , arm1_joint1(0.0)
    , success(false)  {
    }
  ArmAngles_(const ContainerAllocator& _alloc)
    : arm0_joint0(0.0)
    , arm0_joint1(0.0)
    , arm1_joint0(0.0)
    , arm1_joint1(0.0)
    , success(false)  {
  (void)_alloc;
    }



   typedef float _arm0_joint0_type;
  _arm0_joint0_type arm0_joint0;

   typedef float _arm0_joint1_type;
  _arm0_joint1_type arm0_joint1;

   typedef float _arm1_joint0_type;
  _arm1_joint0_type arm1_joint0;

   typedef float _arm1_joint1_type;
  _arm1_joint1_type arm1_joint1;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::airhockey_main::ArmAngles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airhockey_main::ArmAngles_<ContainerAllocator> const> ConstPtr;

}; // struct ArmAngles_

typedef ::airhockey_main::ArmAngles_<std::allocator<void> > ArmAngles;

typedef boost::shared_ptr< ::airhockey_main::ArmAngles > ArmAnglesPtr;
typedef boost::shared_ptr< ::airhockey_main::ArmAngles const> ArmAnglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airhockey_main::ArmAngles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airhockey_main::ArmAngles_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace airhockey_main

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'airhockey_main': ['/home/alvin/robotic_airhockey_ws/src/airhockey_main/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::airhockey_main::ArmAngles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airhockey_main::ArmAngles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airhockey_main::ArmAngles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airhockey_main::ArmAngles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airhockey_main::ArmAngles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airhockey_main::ArmAngles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airhockey_main::ArmAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "03c786ea5bb5b9ff9771f16c1a88ee81";
  }

  static const char* value(const ::airhockey_main::ArmAngles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x03c786ea5bb5b9ffULL;
  static const uint64_t static_value2 = 0x9771f16c1a88ee81ULL;
};

template<class ContainerAllocator>
struct DataType< ::airhockey_main::ArmAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airhockey_main/ArmAngles";
  }

  static const char* value(const ::airhockey_main::ArmAngles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airhockey_main::ArmAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 arm0_joint0\n\
float32 arm0_joint1\n\
float32 arm1_joint0\n\
float32 arm1_joint1\n\
bool success\n\
";
  }

  static const char* value(const ::airhockey_main::ArmAngles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airhockey_main::ArmAngles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm0_joint0);
      stream.next(m.arm0_joint1);
      stream.next(m.arm1_joint0);
      stream.next(m.arm1_joint1);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmAngles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airhockey_main::ArmAngles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airhockey_main::ArmAngles_<ContainerAllocator>& v)
  {
    s << indent << "arm0_joint0: ";
    Printer<float>::stream(s, indent + "  ", v.arm0_joint0);
    s << indent << "arm0_joint1: ";
    Printer<float>::stream(s, indent + "  ", v.arm0_joint1);
    s << indent << "arm1_joint0: ";
    Printer<float>::stream(s, indent + "  ", v.arm1_joint0);
    s << indent << "arm1_joint1: ";
    Printer<float>::stream(s, indent + "  ", v.arm1_joint1);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIRHOCKEY_MAIN_MESSAGE_ARMANGLES_H
